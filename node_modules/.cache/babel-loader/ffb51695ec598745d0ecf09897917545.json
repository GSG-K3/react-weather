{"ast":null,"code":"var _jsxFileName = \"/home/ruba/react-weather/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchLocation from \"./component/SearchLocation\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      log: null\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position, \"position\");\n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        this.setState = {\n          lat: latitude,\n          log: longitude\n        };\n      });\n    }\n  }\n\n  searchF() {\n    const url1 = 'https://api.openweathermap.org/data/2.5/weather?lat=' + this.state.lat + '&lon=' + this.state.lon + '139&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4';\n    const url2 = 'https://api.openweathermap.org/data/2.5/weather?q=' + this.state.text + '&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4';\n\n    if (this.state.text === \"\") {\n      // && document.getElementById('city').style.visibility != 'visible'){\n      const response = fetch(url1);\n    } else {\n      const response = fetch(url1);\n    }\n\n    const data = response.JSON(); //  xhr.open(\"GET\", this.url)\n    //  xhr.send();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \" WHAT'S THE WEATHER? \"), /*#__PURE__*/React.createElement(SearchLocation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ruba/react-weather/src/App.js"],"names":["React","Component","SearchLocation","App","state","lat","log","componentDidMount","navigator","geolocation","getCurrentPosition","position","console","latitude","coords","longitude","setState","searchF","url1","lon","url2","text","response","fetch","data","JSON","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,GAAG,EAAE,IADC;AAENC,MAAAA,GAAG,EAAE;AAFC,KADkB;AAAA;;AAK1BC,EAAAA,iBAAiB,GAAG;AAElB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACnDC,QAAAA,OAAO,CAACN,GAAR,CAAYK,QAAZ,EAAsB,UAAtB;AACA,YAAIE,QAAQ,GAAGF,QAAQ,CAACG,MAAT,CAAgBD,QAA/B;AACA,YAAIE,SAAS,GAAGJ,QAAQ,CAACG,MAAT,CAAgBC,SAAhC;AACA,aAAKC,QAAL,GAAe;AAACX,UAAAA,GAAG,EAACQ,QAAL;AAAcP,UAAAA,GAAG,EAACS;AAAlB,SAAf;AACD,OALD;AAOD;AAGF;;AAEDE,EAAAA,OAAO,GAAG;AACR,UAAMC,IAAI,GAAE,yDAAuD,KAAKd,KAAL,CAAWC,GAAlE,GAAsE,OAAtE,GAA8E,KAAKD,KAAL,CAAWe,GAAzF,GAA6F,0DAAzG;AACA,UAAMC,IAAI,GAAE,uDAAuD,KAAKhB,KAAL,CAAWiB,IAAlE,GAAwE,uDAApF;;AAEM,QAAG,KAAKjB,KAAL,CAAWiB,IAAX,KAAoB,EAAvB,EAA0B;AAAC;AAEzB,YAAMC,QAAQ,GAAGC,KAAK,CAACL,IAAD,CAAtB;AACC,KAHH,MAIC;AAEH,YAAMI,QAAQ,GAAGC,KAAK,CAACL,IAAD,CAAtB;AACO;;AACN,UAAMM,IAAI,GAAGF,QAAQ,CAACG,IAAT,EAAb,CAZG,CAgBJ;AACA;AAEK;;AAIXC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAEE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAlDyB;;AAqD5B,eAAevB,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchLocation from \"./component/SearchLocation\";\nclass App extends Component {\n  state = {\n    lat: null,\n    log: null\n  };\n  componentDidMount() {\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position, \"position\");\n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        this.setState=({lat:latitude,log:longitude})\n      });\n     \n    }\n    \n   \n  }\n\n  searchF (){\n    const url1 ='https://api.openweathermap.org/data/2.5/weather?lat='+this.state.lat+'&lon='+this.state.lon+'139&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4';\n    const url2 ='https://api.openweathermap.org/data/2.5/weather?q=' + this.state.text +'&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4';\n\n          if(this.state.text === \"\"){// && document.getElementById('city').style.visibility != 'visible'){\n            \n            const response = fetch(url1);\n            }\n      else {\n            \n        const response = fetch(url1);\n              } \n         const data = response.JSON();\n         \n         \n         \n        //  xhr.open(\"GET\", this.url)\n        //  xhr.send();\n         \n            }   \n         \n             \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1> WHAT'S THE WEATHER? </h1>\n        <SearchLocation />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}