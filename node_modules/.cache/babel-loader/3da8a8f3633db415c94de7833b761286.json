{"ast":null,"code":"var _jsxFileName = \"/home/ruba/react-weather/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchLocation from \"./component/SearchLocation\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      log: null,\n      cityName: \"\",\n      temperature: \"\",\n      weather: \"\",\n      icon: \"\",\n      wind_speed: \"\",\n      Humidity: \"\"\n    };\n\n    this.getWeather = async e => {\n      const city = e.cityName;\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4`);\n      fetch(api_call).then(rresponse => res.json()).then(res => {\n        this.setState = {\n          temperature: res.main.temp\n        };\n        console.log(this.state.temperature);\n      }).catch(err => console.log(err));\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position, \"position\");\n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        this.setState = {\n          lat: latitude,\n          log: longitude\n        };\n      }); // this.getWeather();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \" WHAT'S THE WEATHER? \"), /*#__PURE__*/React.createElement(SearchLocation, {\n      city: this.state.cityName,\n      onSubmit: this.getWeather,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ruba/react-weather/src/App.js"],"names":["React","Component","SearchLocation","App","state","lat","log","cityName","temperature","weather","icon","wind_speed","Humidity","getWeather","e","city","api_call","fetch","then","rresponse","res","json","setState","main","temp","console","catch","err","componentDidMount","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BG,KAD0B,GAClB;AACNC,MAAAA,GAAG,EAAE,IADC;AAENC,MAAAA,GAAG,EAAE,IAFC;AAGNC,MAAAA,QAAQ,EAAC,EAHH;AAINC,MAAAA,WAAW,EAAC,EAJN;AAKNC,MAAAA,OAAO,EAAC,EALF;AAMNC,MAAAA,IAAI,EAAC,EANC;AAONC,MAAAA,UAAU,EAAC,EAPL;AAQNC,MAAAA,QAAQ,EAAC;AARH,KADkB;;AAAA,SA2B1BC,UA3B0B,GA2Bb,MAAMC,CAAN,IAAU;AAEtB,YAAMC,IAAI,GAAGD,CAAC,CAACP,QAAf;AACA,YAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,qDAAoDF,IAAK,uDAA3D,CAA5B;AACFE,MAAAA,KAAK,CAACD,QAAD,CAAL,CACME,IADN,CACYC,SAAD,IAAeC,GAAG,CAACC,IAAJ,EAD1B,EAEMH,IAFN,CAEYE,GAAD,IAAS;AACb,aAAKE,QAAL,GAAe;AACbd,UAAAA,WAAW,EAACY,GAAG,CAACG,IAAJ,CAASC;AADR,SAAf;AAGAC,QAAAA,OAAO,CAACnB,GAAR,CAAY,KAAKF,KAAL,CAAWI,WAAvB;AACD,OAPN,EASMkB,KATN,CASaC,GAAD,IAASF,OAAO,CAACnB,GAAR,CAAYqB,GAAZ,CATrB;AAUA,KAzC2B;AAAA;;AAW1BC,EAAAA,iBAAiB,GAAG;AAElB,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCC,QAAQ,IAAI;AACnDP,QAAAA,OAAO,CAACnB,GAAR,CAAY0B,QAAZ,EAAsB,UAAtB;AACA,YAAIC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAA/B;AACA,YAAIE,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAhC;AACA,aAAKb,QAAL,GAAe;AAACjB,UAAAA,GAAG,EAAC4B,QAAL;AAAc3B,UAAAA,GAAG,EAAC6B;AAAlB,SAAf;AAED,OAND,EADyB,CAS3B;AACC;AAGF;;AAiBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAEE,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWG,QAAjC;AAA2C,MAAA,QAAQ,EAAE,KAAKM,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAlDyB;;AAsD5B,eAAeV,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchLocation from \"./component/SearchLocation\";\nclass App extends Component {\n  state = {\n    lat: null,\n    log: null, \n    cityName:\"\",\n    temperature:\"\", \n    weather:\"\", \n    icon:\"\",\n    wind_speed:\"\", \n    Humidity:\"\"\n  };\n  componentDidMount() {\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(position, \"position\");\n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n        this.setState=({lat:latitude,log:longitude}) \n       \n      });\n      \n    // this.getWeather();\n    }\n    \n   \n  }   \n  getWeather = async(e)=>{\n\n   const city = e.cityName;\n   const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&apikey=cf9fb4df751879d3f30929a3dd9050e4`); \n fetch(api_call)\n      .then((rresponse) => res.json())\n      .then((res) => {\n        this.setState=({\n          temperature:res.main.temp\n        })\n        console.log(this.state.temperature);\n      })\n\n      .catch((err) => console.log(err));\n}    \n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1> WHAT'S THE WEATHER? </h1>\n        <SearchLocation city={this.state.cityName} onSubmit={this.getWeather}/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}